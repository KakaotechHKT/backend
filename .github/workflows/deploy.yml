name: Deploy Spring Boot App with Gradle and Docker

on:
  push:
    branches:
      - main
      - develop
      - feat/cicd-dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'dev' && 'dev' || 'main' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3  # 코드 가져오기

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission to Gradle
        run: chmod +x gradlew  # gradlew 실행 권한 부여

      - name: Build with Gradle (Without Tests)
        run: ./gradlew clean build -x test  # 테스트 제외 빌드

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  # Docker Buildx 설정

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Image & Container Name
        run: |
          echo "🔹 Setting IMAGE_NAME with latest tag..."
          
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          if [ "$BRANCH_NAME" == "main" ]; then
            IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/babpat-backend:latest"
            SPRING_PROFILE="prod"
          else
            IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/dev-babpat-backend:latest"
            SPRING_PROFILE="dev"
          fi

          CONTAINER_NAME="babpat-backend"

          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "CONTAINER_NAME=${CONTAINER_NAME}" >> $GITHUB_ENV
          echo "SPRING_PROFILE=${SPRING_PROFILE}" >> $GITHUB_ENV

          echo "🔹 IMAGE_NAME 확인: ${IMAGE_NAME}"
          echo "🔹 CONTAINER_NAME 확인: ${CONTAINER_NAME}"
          echo "🔹 SPRING_PROFILE 확인: ${SPRING_PROFILE}"

      - name: Build and Push Docker Image
        run: |
          echo "🔹 Docker 이미지 빌드 중..."
          docker build -t "$IMAGE_NAME" . || { echo "❌ Docker build 실패"; exit 1; }
          
          echo "🔹 Docker Hub 푸시..."
          docker push "$IMAGE_NAME" || { echo "❌ Docker push 실패"; exit 1; }

      - name: Save SSH Key (PEM)
        run: |
          echo "🔹 Saving SSH Key..."
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem  # 파일 권한 설정

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ secrets.EC2_HOST }} "bash -s" <<EOF
            echo "🔹 EC2 접속 성공. Docker 컨테이너 배포 시작..."
            echo "🔹 사용 중인 Docker 이미지: ${IMAGE_NAME}"
            echo "🔹 적용할 Spring 프로필: ${SPRING_PROFILE}"

            echo "🔹 Docker Hub 로그인"
            docker login -u '${{ secrets.DOCKER_USERNAME }}' -p '${{ secrets.DOCKER_PASSWORD }}' || { echo "❌ Docker Hub 로그인 실패"; exit 1; }
            
            echo "🔹 기존 컨테이너 중지 및 삭제..."
            if [ "\$(docker ps -q -f name=${CONTAINER_NAME})" ]; then
              docker stop ${CONTAINER_NAME}
              docker rm ${CONTAINER_NAME}
            else
              echo "⚠ 기존 컨테이너 없음"
            fi

            echo "🔹 최신 Docker 이미지 Pull..."
            docker pull "${IMAGE_NAME}" || { echo "❌ Docker Pull 실패"; exit 1; }

            echo "🔹 새 컨테이너 실행"
            docker run -d --name ${CONTAINER_NAME} -p 8080:8080 \
              --network host \
              -e SPRING_PROFILES_ACTIVE='${SPRING_PROFILE}' \
              -e SPRING_DATASOURCE_URL='${{ secrets.DB_URL }}' \
              -e SPRING_DATASOURCE_USERNAME='${{ secrets.DB_USERNAME }}' \
              -e SPRING_DATASOURCE_PASSWORD='${{ secrets.DB_PASSWORD }}' \
              -e SPRING_DATASOURCE_DRIVER_CLASS_NAME='com.mysql.cj.jdbc.Driver' \
              -e SPRING_DATA_REDIS_HOST='${{ secrets.REDIS_HOST }}' \
              -e SPRING_DATA_REDIS_PORT='${{ secrets.REDIS_PORT }}' \
              -e SPRING_DATA_REDIS_REPOSITORIES_ENABLED='false' \
              -e SPRING_JPA_HIBERNATE_DDL_AUTO='create' \
              -e SPRING_JPA_SHOW_SQL='true' \
              -e SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL='true' \
              -e SERVER_SERVLET_SESSION_COOKIE_DOMAIN='${{ secrets.SERVER_COOKIE_DOMAIN }}' \
              -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
              -e JWT_EXPIRATION_TIME_ACCESS_TOKEN='${{ secrets.JWT_EXPIRATION_TIME_ACCESS_TOKEN }}' \
              -e JWT_EXPIRATION_TIME_REFRESH_TOKEN='${{ secrets.JWT_EXPIRATION_TIME_REFRESH_TOKEN }}' \
              --restart unless-stopped \
              "${IMAGE_NAME}"
          EOF
