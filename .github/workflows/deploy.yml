name: Deploy Spring Boot App with Gradle and Docker

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 실행됨

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # GitHub에서 제공하는 Ubuntu 서버에서 실행

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3  # 코드 가져오기

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission to Gradle
        run: chmod +x gradlew  # gradlew 실행 권한 부여

      - name: Build with Gradle (Without Tests)
        run: ./gradlew clean build -x test  # 테스트를 제외하고 빌드

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  # Docker Buildx 설정

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # GitHub Secrets에서 가져오기
          password: ${{ secrets.DOCKER_PASSWORD }}  # GitHub Secrets에서 가져오기

      - name: Debug: Check Docker Info
        run: |
          docker info
          docker version
          docker images
          echo "🔹 Docker 실행 환경 확인 완료"

      - name: Build and Push Docker Image
        run: |
          echo "🔹 Generating IMAGE_TAG..."
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)  # 이미지 태그 생성
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/babpat-backend:$IMAGE_TAG"
          echo "🔹 IMAGE_TAG 확인: $IMAGE_TAG"
          echo "🔹 IMAGE_NAME 확인: $IMAGE_NAME"
          # Docker 이미지 빌드
          docker build -t $IMAGE_NAME . || { echo "❌ Docker build 실패"; exit 1; }
          # 최신 태그 적용
          docker tag $IMAGE_NAME ${{ secrets.DOCKER_USERNAME }}/babpat-backend:latest
          # Docker Hub 푸시
          docker push $IMAGE_NAME || { echo "❌ Docker push 실패"; exit 1; }
          docker push ${{ secrets.DOCKER_USERNAME }}/babpat-backend:latest || { echo "❌ Docker push 실패"; exit 1; }

      - name: Save SSH Key (PEM)
        run: |
          echo "🔹 Decoding SSH Key..."
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > key.pem || { echo "❌ SSH 키 복호화 실패"; exit 1; }
          chmod 600 key.pem  # 파일 권한 설정

      - name: Deploy to EC2 (Zero Downtime)
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            echo "🔹 EC2 접속 성공. Docker 컨테이너 배포 시작..."

            echo "🔹 환경 변수 확인..."
            echo "DB_URL=${{ secrets.DB_URL }}"
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}"
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
            echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}"

            echo "🔹 최신 Docker 이미지 확인..."
            IMAGE_TAG=$(docker images | grep '${{ secrets.DOCKER_USERNAME }}/babpat-backend' | awk '{print $2}' | head -n 1)
            echo "IMAGE_TAG: $IMAGE_TAG"
            if [ -z "$IMAGE_TAG" ]; then
              echo "❌ Docker 이미지 태그가 비어 있음!"
              exit 1
            fi

            echo "🔹 최신 Docker 이미지 Pull..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/babpat-backend:$IMAGE_TAG || { echo "❌ Docker Pull 실패"; exit 1; }

            echo "🔹 기존 컨테이너 중지 및 삭제..."
            docker stop babpat-backend || echo "⚠ 기존 컨테이너가 없음"
            docker rm babpat-backend || echo "⚠ 기존 컨테이너 삭제 불필요"

            echo "🔹 새 컨테이너 실행..."
            docker run -d --name babpat-backend -p 8080:8080 \
              -e DB_URL="${{ secrets.DB_URL }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              --restart unless-stopped \
              ${{ secrets.DOCKER_USERNAME }}/babpat-backend:$IMAGE_TAG || { echo "❌ Docker 실행 실패"; exit 1; }

            echo "🔹 실행 중인 컨테이너 확인:"
            docker ps -a
          EOF
